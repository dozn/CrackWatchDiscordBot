run:
  timeout: 15s
  allow-parallel-runners: true

linters-settings:
  depguard:
   list-type: blacklist
   include-go-root: true
   packages:
    #  - log
   packages-with-error-message:
      # specify an error message to output when a blacklisted package is used
      # log: "logging is allowed only by our custom logger"
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 50
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false
  funlen:
    lines: 60
    statements: 40
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    # run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    disabled-checks:
      - commentedOutCode
      - commentFormatting
      - whyNoLint
  #    settings: # settings passed to gocritic
  #      captLocal: # must be valid enabled check name
  #        paramsOnly: true
  #      rangeValCopy:
  #        sizeThreshold: 32
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10
  godox:
    # report any comments starting with keywords, this is useful for comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords:
      #      - NOTE
      - TODO
      - FIXME
      - OPTIMIZE
      - HACK
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  gofumpt:
    # Choose whether or not to use the extra rules that are disabled by default.
    extra-rules: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
#    local-prefixes: github.com/org/project
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.0
  gomnd:
    settings:
      mnd:
        # https://github.com/tommy-muehle/go-mnd/#checks
        checks: case,condition,operation,return #argument,assign
        # ignored-numbers: 0,1 # Can't use this until https://github.com/golangci/golangci-lint/pull/939 is merged
  govet:
    # report about shadowed variables
    check-shadowing: true
    # settings per analyzer
  #    settings:
  #      printf: # analyzer name, run `go tool vet help` to see all analyzers
  #        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
  #          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
  #          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
  #          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
  #          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 80
    # tab width in spaces. Default to 1.
    tab-width: 4
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: en-CA # default was "US"
    ignore-words:
    #  - someword
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 0
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature
  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true
    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0

linters:
  enable-all: true
  disable:
    - goimports
    - gofmt
    # False positives due to not being able to handle our comment style.
    - godot
    - godox
    - goprintffuncname
    - wsl
    # I _want_ to be able to test private functions.
    - testpackage
    # This application is far too small to worry about globals.
    - gochecknoglobals
    # Usually a good idea, but in this case I log and return user-errors one
    #  right after another, and I feel it's better these are connecated.
    - nlreturn
  fast: false

issues:
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude line length checks on tests.
    - path: _test\.go
      linters:
        - lll
    # Exclude comments.
    - linters:
      - lll
      source: "^[\t]*//"
    # Exclude URLs in comments.
    - linters:
      - lll
      source: "^[\t]*//  http|^[\t]*// http"
    # I don't care about godoc, I care more about exporting things I don't want
    #  users to have manual control over.
    - linters:
      - golint
      text: "returns unexported type"
    - linters:
      - golint
      text: "error strings should not be capitalized or end with punctuation or a newline"
    # These two check to see if comments on exported variables start with the variable
    #  name itself. This doesn't work all the time since sometimes we just want
    #  to include a "NOTE:".
    - linters:
      - golint
      text: "comment on exported var"
    - linters:
      - stylecheck
      text: "ST1022: comment on exported var"
    - linters:
      - stylecheck
      text: "error strings should not end with punctuation or a newline"
    - linters:
      - stylecheck
      text: "ST1005: error strings should not be capitalized"
    # This linter wants every single error to use fmt.Errorf(). We don't.
    - linters:
      - goerr113
      text: "do not define dynamic errors"
    # CURL is the correct capitalization if at the beginning of an exported
    #  function.
    - linters:
      - gocritic
      text: "should not be capitalized"
      source: "CURL"